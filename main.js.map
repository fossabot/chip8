{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/util.js","webpack:///./src/font-sprites.js","webpack:///./src/chip8.js","webpack:///./src/screen.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","opCode_nnn","opcode","opCode_nn","opCode_n","opCode_x","opCode_y","fontSprites","Chip8","options","_classCallCheck","this","MEM_SIZE","memSize","PC_START","pcStart","STACK_SIZE","stackSize","DISPLAY_SIZE","displaySize","screen","draw","displayData","reset","_this","memory","Uint8Array","forEach","element","index","V","I","DT","ST","PC","SP","stack","Uint16Array","display","Array","fill","keys","waitingKey","waitingKeyTarget","addr","data","writeByte","executeOpCode","shouldDraw","opCode","Error","concat","toString","opCodeFamily_0x0","opCodeFamily_0x1","opCodeFamily_0x2","opCodeFamily_0x3","opCodeFamily_0x4","opCodeFamily_0x5","opCodeFamily_0x6","opCodeFamily_0x7","opCodeFamily_0x8","opCodeFamily_0x9","opCodeFamily_0xA","opCodeFamily_0xB","opCodeFamily_0xC","opCodeFamily_0xD","opCodeFamily_0xE","opCodeFamily_0xF","throwInvalidOpCode","nnn","x","nn","y","sum","xMinusY","rightShift","yMinusX","leftShift","Math","random","row","spriteRow","bitIndex","displayPosition","keyPressed","keyNotPresseed","floor","clockHandle","timerHandler","Screen","canvas","screen_classCallCheck","backgroundColor","g","b","drawColor","width","height","ctx","getContext","canvasWidth","canvasHeight","pixelSize","fillStyle","fillRect","length","_drawPixel","color","scaledX","scaledY","rom","chip8","document","getElementById","querySelector","addEventListener","clearInterval","console","log","byte","setInterval","cycle","newDt","newSt","evt","file","target","files","reader","FileReader","onload","event","arrayBufferNew","result","readAsArrayBuffer"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export function opCode_nnn(opcode) {\n    return opcode & 0x0FFF;\n}\n\nexport function opCode_nn(opcode) {\n    return opcode & 0x00FF;\n}\n\nexport function opCode_n(opcode) {\n    return opcode & 0x000F;\n}\n\nexport function opCode_x(opcode) {\n    return (opcode & 0x0F00) >> 8;\n}\n\nexport function opCode_y(opcode) {\n    return (opcode & 0x00F0) >> 4;\n}\n","export const fontSprites = [\n    0xF0, 0x90, 0x90, 0x90, 0xF0, // 0\n    0x20, 0x60, 0x20, 0x20, 0x70, // 1\n    0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2\n    0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3\n    0x90, 0x90, 0xF0, 0x10, 0x10, // 4\n    0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5\n    0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6\n    0xF0, 0x10, 0x20, 0x40, 0x40, // 7\n    0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8\n    0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9\n    0xF0, 0x90, 0xF0, 0x90, 0x90, // A\n    0xE0, 0x90, 0xE0, 0x90, 0xE0, // B\n    0xF0, 0x80, 0x80, 0x80, 0xF0, // C\n    0xE0, 0x90, 0x90, 0x90, 0xE0, // D\n    0xF0, 0x80, 0xF0, 0x80, 0xF0, // E\n    0xF0, 0x80, 0xF0, 0x80, 0x80  // F\n];\n","import { opCode_nnn, opCode_nn, opCode_n, opCode_x, opCode_y } from './util';\nimport { fontSprites } from './font-sprites'\n\n/**\n * CHIP-8 Interpreter\n * \n * References:\n * - http://devernay.free.fr/hacks/chip8/C8TECH10.HTM - by Thomas P. Greene\n * - http://mattmik.com/files/chip8/mastering/chip8.html - By Matthew Mikolay\n */\nexport class Chip8 {\n    /**\n     * @typedef {object} Chip8Options\n     * @property {number} [memSize=4096] - The interpreter memory map size\n     * @property {number} [pcStart=0x200] - The start position for the Program Counter\n     * @property {number} [stackSize=16] - Interpreter stack size\n     * @property {number} [displaySize=64*32] - Display size\n     */\n    /**\n     * Constructs the CHIP-8 processor\n     * @param {Chip8Options} [options] - The {@link Chip8Options} to be used by the interpreter\n     */\n    constructor(options) {\n        options = options || {};\n        this.MEM_SIZE = options.memSize || 4096;\n        this.PC_START = options.pcStart || 0x200;\n        this.STACK_SIZE = options.stackSize || 16;\n        this.DISPLAY_SIZE = options.displaySize || 64 * 32;\n        this.screen = { draw: (displayData) => { } };\n        this.reset();\n    }\n\n    /**\n     * Resets the CHIP-8 back to its default state\n     */\n    reset() {\n        this.memory = new Uint8Array(this.MEM_SIZE);\n        fontSprites.forEach((element, index) => {\n            this.memory[index] = element;\n        })\n        this.V = new Uint8Array(16);\n        this.I = 0;\n        this.DT = 0;\n        this.ST = 0;\n        this.PC = this.PC_START;\n        this.SP = 0;\n        this.stack = new Uint16Array(this.STACK_SIZE);\n        this.display = new Array(this.DISPLAY_SIZE).fill(0);\n        this.keys = {};\n        this.waitingKey = false;\n        this.waitingKeyTarget = -1;\n        this.screen.draw(this.display);\n    }\n\n    /**\n     * Set the key as pressed\n     * @param {number} key 0x0 up to 0xF\n     */\n    pressKey(key) {\n        this.keys[key & 0xF] = true;\n        if (this.waitingKey) {\n            this.V[this.waitingKeyTarget] = key;\n            this.waitingKey = false;\n        }\n    }\n\n    /**\n     * Set the key as released\n     * @param {number} key 0x0 up to 0xF\n     */\n    releaseKey(key) {\n        this.keys[key & 0xF] = false;\n    }\n\n    /**\n     * Load 2 bytes of data at the specified address\n     * @param {number} addr - Data target\n     * @param {number} data - 2 bytes of data\n     * @returns {Chip8} - The chip8 itself\n     */\n    writeWord(addr, data) {\n        this.writeByte(addr, (data >> 8) & 0xFF);\n        this.writeByte(addr + 1, data & 0xFF);\n        return this;\n    }\n\n    /**\n     * Write a byte at the address\n     * @param {number} addr - Data target\n     * @param {number} data - byte\n     * @returns {Chip8} - The chip8 itself\n     */\n    writeByte(addr, data) {\n        this.memory[addr] = data;\n    }\n\n    /**\n     * Performs one emulation cycle\n     */\n    cycle() {\n        if (this.waitingKey) {\n            return;\n        }\n\n        const opcode = this.memory[this.PC] << 8 | this.memory[this.PC + 1];\n\n        this.executeOpCode(opcode);\n\n        if (this.shouldDraw) {\n            this.shouldDraw = false;\n            this.screen.draw(this.display);\n        }\n    }\n\n    /**\n     * Throws a formatted exception for invalid op codes\n     * @param {number} opCode \n     */\n    throwInvalidOpCode(opCode) {\n        throw new Error(`Invalid instruction opCode=${opCode.toString(16)}`);\n    }\n\n    /**\n     * \n     * @param {number} opCode - Operation code to be executed\n     * @throws {Error} - if the opcode is not supported\n     */\n    executeOpCode(opCode) {\n        this.PC += 2;\n        const opFamily = (opCode & 0xF000) >> 12;\n\n        // We are using the nibble of the opcode as the\n        // Operation Code \"Family\".\n        switch (opFamily) {\n            case 0x0: this.opCodeFamily_0x0(opCode); return;\n            case 0x1: this.opCodeFamily_0x1(opCode); return;\n            case 0x2: this.opCodeFamily_0x2(opCode); return;\n            case 0x3: this.opCodeFamily_0x3(opCode); return;\n            case 0x4: this.opCodeFamily_0x4(opCode); return;\n            case 0x5: this.opCodeFamily_0x5(opCode); return;\n            case 0x6: this.opCodeFamily_0x6(opCode); return;\n            case 0x7: this.opCodeFamily_0x7(opCode); return;\n            case 0x8: this.opCodeFamily_0x8(opCode); return;\n            case 0x9: this.opCodeFamily_0x9(opCode); return;\n            case 0xA: this.opCodeFamily_0xA(opCode); return;\n            case 0xB: this.opCodeFamily_0xB(opCode); return;\n            case 0xC: this.opCodeFamily_0xC(opCode); return;\n            case 0xD: this.opCodeFamily_0xD(opCode); return;\n            case 0xE: this.opCodeFamily_0xE(opCode); return;\n            case 0xF: this.opCodeFamily_0xF(opCode); return;\n            default: this.throwInvalidOpCode(opCode); return;\n        }\n    }\n\n    opCodeFamily_0x0(opCode) {\n        switch (opCode) {\n            // 00E0 - Clear the screen\n            case 0x00E0:\n                this.display.fill(0);\n                break;\n            // 00EE - Return from a subroutine\n            case 0x00EE:\n                this.SP -= 1;\n                this.PC = this.stack[this.SP];\n                break;\n            // 0NNN - no idea what should happens, make it no-op for now\n            default:\n                break;\n        }\n    }\n\n    opCodeFamily_0x1(opCode) {\n        const nnn = opCode_nnn(opCode);\n        // 1NNN - Jump to address NNN\n        this.PC = nnn;\n    }\n\n    opCodeFamily_0x2(opCode) {\n        const nnn = opCode_nnn(opCode);\n        // 2NNN - Execute subroutine starting at address NNN\n        this.stack[this.SP] = this.PC;\n        this.SP += 1;\n        this.PC = nnn;\n    }\n\n    opCodeFamily_0x3(opCode) {\n        const x = opCode_x(opCode);\n        const nn = opCode_nn(opCode);\n        // 3XNN - Skip the following instruction if the value of register VX equals NN\n        if (this.V[x] === nn) {\n            this.PC += 2;\n        }\n    }\n\n    opCodeFamily_0x4(opCode) {\n        const x = opCode_x(opCode);\n        const nn = opCode_nn(opCode);\n        // 4XNN - Skip the following instruction if the value of register VX is not equal to NN\n        if (this.V[x] !== nn) {\n            this.PC += 2;\n        }\n    }\n\n    opCodeFamily_0x5(opCode) {\n        const x = opCode_x(opCode);\n        const y = opCode_y(opCode);\n        const n = opCode_n(opCode);\n        if (n !== 0x0) this.throwInvalidOpCode(opCode);\n\n        // 5XY0 - Skip the following instruction if the value of register VX is equal to the value of register VY\n        if (this.V[x] === this.V[y]) {\n            this.PC += 2;\n        }\n    }\n\n    opCodeFamily_0x6(opCode) {\n        const x = opCode_x(opCode);\n        const nn = opCode_nn(opCode);\n\n        // 5XNN - Store number NN in register VX\n        this.V[x] = nn;\n    }\n\n    opCodeFamily_0x7(opCode) {\n        const x = opCode_x(opCode);\n        const nn = opCode_nn(opCode);\n        // 7XNN - Add the value NN to register VX\n        this.V[x] = (this.V[x] + nn) & 0xFF;\n    }\n\n    opCodeFamily_0x8(opCode) {\n        const n = opCode_n(opCode);\n        const x = opCode_x(opCode);\n        const y = opCode_y(opCode);\n        switch (n) {\n            // 8XY0 - Store the value of register VY in register VX\n            case 0x0:\n                this.V[x] = this.V[y];\n                break;\n            // 8XY1 - Set VX to VX OR VY\n            case 0x1:\n                this.V[x] = this.V[x] | this.V[y];\n                break;\n            // 8XY2 - Set VX to VX AND VY\n            case 0x2:\n                this.V[x] = this.V[x] & this.V[y];\n                break;\n            // 8XY3 - Set VX to VX XOR VY\n            case 0x3:\n                this.V[x] = this.V[x] ^ this.V[y];\n                break;\n            /* 8XY4 - Add the value of register VY to register VX\n                    - Set VF to 01 if a carry occurs\n                    - Set VF to 00 if a carry does not occur */\n            case 0x4:\n                const sum = this.V[x] + this.V[y];\n                this.V[0xF] = sum > 0xFF;\n                this.V[x] = sum & 0xFF;\n                break;\n            /* 8XY5 - Subtract the value of register VY from register VX\n                    - Set VF to 00 if a borrow occurs\n                    - Set VF to 01 if a borrow does not occur */\n            case 0x5:\n                const xMinusY = this.V[x] - this.V[y];\n                this.V[0xF] = this.V[x] >= this.V[y];\n                this.V[x] = xMinusY & 0xFF;\n                break;\n            /* 8XY6 - Store the value of register VY shifted right one bit in register VX\n                    - Set register VF to the least significant bit prior to the shift */\n            case 0x6:\n                const rightShift = this.V[y] >> 1;\n                this.V[x] = rightShift;\n                this.V[0xF] = this.V[y] & 0x1;\n                break;\n            /* 8XY7 - Set register VX to the value of VY minus VX\n                    - Set VF to 00 if a borrow occurs\n                    - Set VF to 01 if a borrow does not occur */\n            case 0x7:\n                const yMinusX = this.V[y] - this.V[x];\n                this.V[0xF] = this.V[y] >= this.V[x];\n                this.V[x] = yMinusX & 0xFF;\n                break;\n            /* 8XYE - Store the value of register VY shifted left one bit in register VX\n                    - Set register VF to the most significant bit prior to the shift */\n            case 0xE:\n                const leftShift = this.V[y] << 1;\n                this.V[x] = leftShift;\n                this.V[0xF] = (this.V[y] >> 7) & 0x1;\n                break;\n            default: this.throwInvalidOpCode(opCode); return;\n        }\n    }\n\n    opCodeFamily_0x9(opCode) {\n        const x = opCode_x(opCode);\n        const y = opCode_y(opCode);\n        const n = opCode_n(opCode);\n\n        if (n !== 0) this.throwInvalidOpCode(opCode);\n        // 9XY0 - Skip the following instruction if the value of register VX is not equal to the value of register VY\n        if (this.V[x] !== this.V[y]) {\n            this.PC += 2;\n        }\n    }\n\n    opCodeFamily_0xA(opCode) {\n        const nnn = opCode_nnn(opCode);\n        // ANNN - Store memory address NNN in register I\n        this.I = nnn;\n    }\n\n    opCodeFamily_0xB(opCode) {\n        const nnn = opCode_nnn(opCode);\n        // BNNN - Jump to address NNN + V0\n        this.PC = nnn + this.V[0];\n    }\n\n    opCodeFamily_0xC(opCode) {\n        const x = opCode_x(opCode);\n        const nn = opCode_nn(opCode);\n        // CXNN - Set VX to a random number with a mask of NN\n        this.V[x] = (Math.random() * 256) & nn;\n    }\n\n    opCodeFamily_0xD(opCode) {\n        const x = opCode_x(opCode);\n        const y = opCode_y(opCode);\n        const n = opCode_n(opCode);\n        /* DXYN - Draw a sprite at position VX, VY with N bytes of sprite data starting at the address stored in I\n                - Set VF to 01 if any set pixels are changed to unset, and 00 otherwise */\n        this.shouldDraw = true;\n        this.V[0xF] = 0;\n        for (let row = 0; row < n; row++) {\n            const spriteRow = this.memory[this.I + row];\n\n            for (let bitIndex = 0; bitIndex < 8; bitIndex++) {\n                const bit = spriteRow & (0b10000000 >> bitIndex);\n\n                if (!bit) continue;\n\n                const targetX = (this.V[x] + bitIndex) % 64; // modulus to make it wrap to screen\n                const targetY = (this.V[y] + row) % 32;\n                const displayPosition = targetX + (targetY * 64); // Transform 2D to 1D -> i = x + width*y;\n\n                // If the display will be unset, set VF\n                if (this.display[displayPosition] !== 0) {\n                    this.V[0xF] = 0x1;\n                }\n\n                this.display[displayPosition] ^= 1;\n            }\n        }\n    }\n\n    opCodeFamily_0xE(opCode) {\n        const x = opCode_x(opCode);\n        const nn = opCode_nn(opCode);\n\n        switch (nn) {\n            // EX9E - Skip the following instruction if the key corresponding to the hex value currently stored in register VX is pressed\n            case 0x9E:\n                const keyPressed = this.V[x];\n                if (this.keys[keyPressed]) {\n                    this.PC += 2;\n                }\n                break;\n            // EXA1 - Skip the following instruction if the key corresponding to the hex value currently stored in register VX is not pressed\n            case 0xA1:\n                const keyNotPresseed = this.V[x];\n                if (!this.keys[keyNotPresseed]) {\n                    this.PC += 2;\n                }\n                break;\n            default: this.throwInvalidOpCode(opCode); return;\n        }\n    }\n\n    opCodeFamily_0xF(opCode) {\n        const x = opCode_x(opCode);\n        const nn = opCode_nn(opCode);\n\n        switch (nn) {\n            // FX07 - Store the current value of the delay timer in register VX\n            case 0x07:\n                this.V[x] = this.DT;\n                break;\n            // FX0A\t- Wait for a keypress and store the result in register VX\n            case 0x0A:\n                this.waitingKey = true;\n                this.waitingKeyTarget = x;\n                break;\n            // FX15 - Set the delay timer to the value of register VX\n            case 0x15:\n                this.DT = this.V[x];\n                break;\n            // FX18 - Set the sound timer to the value of register VX\n            case 0x18:\n                this.ST = this.V[x];\n                break;\n            // FX1E - Add the value stored in register VX to register I\n            case 0x1E:\n                this.I = (this.I + this.V[x]) & 0xFFFF;\n                break;\n            // FX29 - Set I to the memory address of the sprite data corresponding to the hexadecimal digit stored in register VX\n            case 0x29:\n                this.I = (this.V[x] & 0xF) * 5;\n                break;\n            // FX33 - Store the binary-coded decimal equivalent of the value stored in register VX at addresses I, I+1, and I+2\n            case 0x33:\n                this.memory[this.I] = Math.floor(this.V[x] / 100) % 10;\n                this.memory[this.I + 1] = Math.floor(this.V[x] / 10) % 10;\n                this.memory[this.I + 2] = this.V[x] % 10;\n                break;\n            /* FX55 - Store the values of registers V0 to VX inclusive in memory starting at address I\n                    - I is set to I + X + 1 after operation */\n            case 0x55:\n                for (let i = 0; i <= x; i++) {\n                    this.memory[this.I] = this.V[i];\n                    this.I = (this.I + 1) & 0xFFFF;\n                }\n                break;\n            /* FX65 - Fill registers V0 to VX inclusive with the values stored in memory starting at address I\n                    - I is set to I + X + 1 after operation */\n            case 0x65:\n                for (let i = 0; i <= x; i++) {\n                    this.V[i] = this.memory[this.I];\n                    this.I = (this.I + 1) & 0xFFFF;\n                }\n                break;\n            default: this.throwInvalidOpCode(opCode); return;\n        }\n    }\n}\n","/**\n * Class responsible for rendering display data to a Canvas.\n */\nexport class Screen {\n    /**\n     * @typedef {object} Color\n     * @property {number} r - Red\n     * @property {number} g - Green\n     * @property {number} b - Blue\n     */\n    /**\n     * @typedef {object} ScreenOptions\n     * @property {Color} [backgroundColor={r:40, g:40, b:40}] - The screen background color\n     * @property {Color} [drawColor={r:102, g:255, b:102}] - The screen draw color\n     * @property {number} [width=64] - Screen width\n     * @property {number} [height=32] - Screen height\n     */\n    /**\n     * Constructs the Screen\n     * @param {Element} canvas - The HTML Cavans Element\n     * @param {ScreenOptions} [options] - The {@link ScreenOptions} options object\n     */\n    constructor(canvas, options) {\n        options = options || {};\n        this.backgroundColor = options.backgroundColor || { r: 40, g: 40, b: 40 };\n        this.drawColor = options.backgroundColor || { r: 102, g: 255, b: 102 };\n        this.width = options.width || 64;\n        this.height = options.height || 32;\n        this.canvas = canvas;\n        this.ctx = this.canvas.getContext('2d');\n    }\n\n    /**\n     * Draw the display data on the Canvas element\n     * @param {Array} displayData - Array with the current display data\n     */\n    draw(displayData) {\n        const canvasWidth = this.canvas.width;\n        const canvasHeight = this.canvas.height;\n\n        const pixelSize = canvasHeight / this.height;\n\n        // Clear the screen\n        this.ctx.fillStyle = `rgb(${this.backgroundColor.r},${this.backgroundColor.g},${this.backgroundColor.b})`;\n        this.ctx.fillRect(0, 0, canvasWidth, canvasHeight);\n\n        const drawColor = `rgb(${this.drawColor.r},${this.drawColor.g},${this.drawColor.b})`;\n        for (let i = 0; i < displayData.length; i++) {\n            const y = Math.floor(i / this.width);\n            const x = i % this.width;\n            if (displayData[i] !== 0) {\n                this._drawPixel(x, y, pixelSize, drawColor);\n            }\n        }\n    }\n\n    /**\n     * Change the background color\n     * @param {Color} color - The new background color\n     */\n    setBackGroundColor(color) {\n        this.backgroundColor = color;\n    }\n\n    /**\n     * Change the draw color\n     * @param {Color} color - The new draw color\n     */\n    setDrawColor(color) {\n        this.drawColor = color;\n    }\n\n    _drawPixel(x, y, pixelSize, color) {\n        this.ctx.fillStyle = color;\n        const scaledX = x * pixelSize;\n        const scaledY = y * pixelSize;\n        this.ctx.fillRect(scaledX, scaledY, pixelSize, pixelSize);\n    }\n}\n","import { Chip8 } from \"./chip8.js\";\nimport { Screen } from \"./screen.js\";\n\nlet rom = [];\nconst chip8 = new Chip8();\nchip8.screen = new Screen(document.getElementById('screen'));\nchip8.screen.draw(chip8.display);\nlet clockHandle;\nlet timerHandler;\n\nfunction onStart() {\n    if (clockHandle) {\n        clearInterval(clockHandle);\n        clockHandle = null;\n    }\n\n    if (timerHandler) {\n        clearInterval(timerHandler);\n        timerHandler = null;\n    }\n\n    chip8.reset();\n    let addr = 0x200;\n    console.log(`Rom size ${rom.length}`);\n    rom.forEach((byte) => {\n        chip8.writeByte(addr, byte);\n        addr++;\n    });\n\n    clockHandle = setInterval(() => {\n        chip8.cycle();\n    }, 2);\n\n    timerHandler = setInterval(() => {\n        const newDt = chip8.DT - 1;\n        chip8.DT = newDt > 0 ? newDt : 0;\n        const newSt = chip8.ST - 1;\n        chip8.ST = newSt > 0 ? newSt : 0;\n    }, 1/60);\n}\n\nfunction handleFileSelect(evt) {\n    const file = evt.target.files[0];\n\n    const reader = new FileReader();\n\n    reader.onload = function (event) {\n        const arrayBufferNew = event.target.result;\n        rom = new Uint8Array(arrayBufferNew);\n    };\n\n    reader.readAsArrayBuffer(file);\n}\n\ndocument.querySelector('#start').addEventListener('click', onStart);\ndocument.getElementById('file').addEventListener('change', handleFileSelect, false);\n"],"sourceRoot":""}