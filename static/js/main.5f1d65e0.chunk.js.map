{"version":3,"sources":["interpreter/util.js","interpreter/font-sprites.js","interpreter/chip8.js","components/Screen/Screen.js","components/Screen/index.js","components/Register/Register.js","components/Register/index.js","components/VRegisters/index.js","components/VRegisters/VRegisters.js","components/Stack/index.js","components/Stack/Stack.js","components/App/index.js","components/App/App.js","serviceWorker.js","index.js"],"names":["opCode_nnn","opcode","opCode_nn","opCode_n","opCode_x","opCode_y","fontSprites","Chip8","options","Object","classCallCheck","this","MEM_SIZE","memSize","PC_START","pcStart","STACK_SIZE","stackSize","DISPLAY_SIZE","displaySize","screen","draw","displayData","reset","_this","memory","Uint8Array","forEach","element","index","V","I","DT","ST","PC","SP","stack","Uint16Array","display","Array","fill","keys","waitingKey","waitingKeyTarget","key","console","log","addr","data","writeByte","executeOpCode","shouldDraw","opCode","Error","concat","toString","opCodeFamily_0x0","opCodeFamily_0x1","opCodeFamily_0x2","opCodeFamily_0x3","opCodeFamily_0x4","opCodeFamily_0x5","opCodeFamily_0x6","opCodeFamily_0x7","opCodeFamily_0x8","opCodeFamily_0x9","opCodeFamily_0xA","opCodeFamily_0xB","opCodeFamily_0xC","opCodeFamily_0xD","opCodeFamily_0xE","opCodeFamily_0xF","throwInvalidOpCode","nnn","x","nn","y","n","sum","xMinusY","yMinusX","Math","random","row","spriteRow","bitIndex","displayPosition","keyPressed","keyNotPresseed","floor","i","Screen","props","possibleConstructorReturn","getPrototypeOf","call","containerRef","React","createRef","canvasRef","containerWidth","current","offsetWidth","containerHeight","offsetHeight","scale","min","canvasWidth","width","canvasHeight","height","ctx","fillStyle","rgbFromColor","backgroundColor","fillRect","pixelSize","drawColor","length","scaledX","scaledY","shadowBlur","shadowColor","requestFrameId","window","requestAnimationFrame","bind","color","r","g","b","getContext","resizeCanvas","addEventListener","cancelAnimationFrame","removeEventListener","react_default","a","createElement","ref","className","Component","defaultProps","Register","state","oldValue","currentValue","nextProps","nextState","value","setState","label","numberToHex","number","padStart","bytes","toUpperCase","VRegisters","items","from","v","map","components_Register","Stack","App","handleFile","evt","preventDefault","file","target","files","reader","FileReader","onload","event","arrayBufferNew","result","rom","readAsArrayBuffer","handleStart","e","intervalHandle","clearInterval","chip8","byte","setInterval","remainingCycles","cyclesPerTick","cycle","soundTimerTick","delayTimerTick","myRef","type","id","onChange","onClick","components_VRegisters","components_Stack","components_Screen","Boolean","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5f1d65e0.chunk.js","sourcesContent":["export function opCode_nnn(opcode) {\n    return opcode & 0x0FFF;\n}\n\nexport function opCode_nn(opcode) {\n    return opcode & 0x00FF;\n}\n\nexport function opCode_n(opcode) {\n    return opcode & 0x000F;\n}\n\nexport function opCode_x(opcode) {\n    return (opcode & 0x0F00) >> 8;\n}\n\nexport function opCode_y(opcode) {\n    return (opcode & 0x00F0) >> 4;\n}\n","const fontSprites = [\n    0xF0, 0x90, 0x90, 0x90, 0xF0, // 0\n    0x20, 0x60, 0x20, 0x20, 0x70, // 1\n    0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2\n    0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3\n    0x90, 0x90, 0xF0, 0x10, 0x10, // 4\n    0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5\n    0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6\n    0xF0, 0x10, 0x20, 0x40, 0x40, // 7\n    0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8\n    0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9\n    0xF0, 0x90, 0xF0, 0x90, 0x90, // A\n    0xE0, 0x90, 0xE0, 0x90, 0xE0, // B\n    0xF0, 0x80, 0x80, 0x80, 0xF0, // C\n    0xE0, 0x90, 0x90, 0x90, 0xE0, // D\n    0xF0, 0x80, 0xF0, 0x80, 0xF0, // E\n    0xF0, 0x80, 0xF0, 0x80, 0x80  // F\n];\n\nexport default fontSprites;\n","import { opCode_nnn, opCode_nn, opCode_n, opCode_x, opCode_y } from './util';\nimport fontSprites from './font-sprites'\n\n/**\n * CHIP-8 Interpreter\n * \n * References:\n * - http://devernay.free.fr/hacks/chip8/C8TECH10.HTM - by Thomas P. Greene\n * - http://mattmik.com/files/chip8/mastering/chip8.html - By Matthew Mikolay\n */\nclass Chip8 {\n    /**\n     * @typedef {object} Chip8Options\n     * @property {number} [memSize=4096] - The interpreter memory map size\n     * @property {number} [pcStart=0x200] - The start position for the Program Counter\n     * @property {number} [stackSize=16] - Interpreter stack size\n     * @property {number} [displaySize=64*32] - Display size\n     */\n    /**\n     * Constructs the CHIP-8 processor\n     * @param {Chip8Options} [options] - The {@link Chip8Options} to be used by the interpreter\n     */\n    constructor(options) {\n        options = options || {};\n        this.MEM_SIZE = options.memSize || 4096;\n        this.PC_START = options.pcStart || 0x200;\n        this.STACK_SIZE = options.stackSize || 16;\n        this.DISPLAY_SIZE = options.displaySize || 64 * 32;\n        this.screen = { draw: (displayData) => { } };\n        this.reset();\n    }\n\n    /**\n     * Resets the CHIP-8 back to its default state\n     */\n    reset() {\n        this.memory = new Uint8Array(this.MEM_SIZE);\n        fontSprites.forEach((element, index) => {\n            this.memory[index] = element;\n        })\n        this.V = new Uint8Array(16);\n        this.I = 0;\n        this.DT = 0;\n        this.ST = 0;\n        this.PC = this.PC_START;\n        this.SP = 0;\n        this.stack = new Uint16Array(this.STACK_SIZE);\n        this.display = new Array(this.DISPLAY_SIZE).fill(0);\n        this.keys = {};\n        this.waitingKey = false;\n        this.waitingKeyTarget = -1;\n        this.screen.draw(this.display);\n    }\n\n    /**\n     * Set the key as pressed\n     * @param {number} key 0x0 up to 0xF\n     */\n    pressKey(key) {\n        this.keys[key & 0xF] = true;\n        if (this.waitingKey) {\n            this.V[this.waitingKeyTarget] = key;\n            this.waitingKey = false;\n        }\n    }\n\n    /**\n     * Set the key as released\n     * @param {number} key 0x0 up to 0xF\n     */\n    releaseKey(key) {\n        this.keys[key & 0xF] = false;\n    }\n\n    /**\n     * Decreases the delay timer by 1\n     */\n    delayTimerTick() {\n        if (this.DT > 0) {\n            this.DT -= 1;\n        }\n    }\n\n    /**\n     * Decreases the sound timer by 1 and stop the beep\n     */\n    soundTimerTick() {\n        if (this.ST > 0) {\n            this.ST -= 1;\n        }\n\n        if (this.ST) {\n            console.log('Stop sound!');\n        }\n    }\n\n    /**\n     * Load 2 bytes of data at the specified address\n     * @param {number} addr - Data target\n     * @param {number} data - 2 bytes of data\n     * @returns {Chip8} - The chip8 itself\n     */\n    writeWord(addr, data) {\n        this.writeByte(addr, (data >> 8) & 0xFF);\n        this.writeByte(addr + 1, data & 0xFF);\n        return this;\n    }\n\n    /**\n     * Write a byte at the address\n     * @param {number} addr - Data target\n     * @param {number} data - byte\n     * @returns {Chip8} - The chip8 itself\n     */\n    writeByte(addr, data) {\n        this.memory[addr] = data;\n    }\n\n    /**\n     * Performs one emulation cycle\n     */\n    cycle() {\n        if (this.waitingKey) {\n            return;\n        }\n\n        const opcode = (this.memory[this.PC] << 8) | this.memory[this.PC + 1];\n\n        this.executeOpCode(opcode);\n\n        if (this.shouldDraw) {\n            this.shouldDraw = false;\n            this.screen.draw(this.display);\n        }\n    }\n\n    /**\n     * Throws a formatted exception for invalid op codes\n     * @param {number} opCode \n     */\n    throwInvalidOpCode(opCode) {\n        throw new Error(`Invalid instruction opCode=${opCode.toString(16)}`);\n    }\n\n    /**\n     * \n     * @param {number} opCode - Operation code to be executed\n     * @throws {Error} - if the opcode is not supported\n     */\n    executeOpCode(opCode) {\n        this.PC += 2;\n        const opFamily = (opCode & 0xF000) >> 12;\n\n        // We are using the nibble of the opcode as the\n        // Operation Code \"Family\".\n        switch (opFamily) {\n            case 0x0: this.opCodeFamily_0x0(opCode); return;\n            case 0x1: this.opCodeFamily_0x1(opCode); return;\n            case 0x2: this.opCodeFamily_0x2(opCode); return;\n            case 0x3: this.opCodeFamily_0x3(opCode); return;\n            case 0x4: this.opCodeFamily_0x4(opCode); return;\n            case 0x5: this.opCodeFamily_0x5(opCode); return;\n            case 0x6: this.opCodeFamily_0x6(opCode); return;\n            case 0x7: this.opCodeFamily_0x7(opCode); return;\n            case 0x8: this.opCodeFamily_0x8(opCode); return;\n            case 0x9: this.opCodeFamily_0x9(opCode); return;\n            case 0xA: this.opCodeFamily_0xA(opCode); return;\n            case 0xB: this.opCodeFamily_0xB(opCode); return;\n            case 0xC: this.opCodeFamily_0xC(opCode); return;\n            case 0xD: this.opCodeFamily_0xD(opCode); return;\n            case 0xE: this.opCodeFamily_0xE(opCode); return;\n            case 0xF: this.opCodeFamily_0xF(opCode); return;\n            default: this.throwInvalidOpCode(opCode); return;\n        }\n    }\n\n    opCodeFamily_0x0(opCode) {\n        switch (opCode) {\n            // 00E0 - Clear the screen\n            case 0x00E0:\n                this.display.fill(0);\n                break;\n            // 00EE - Return from a subroutine\n            case 0x00EE:\n                this.SP -= 1;\n                this.PC = this.stack[this.SP];\n                break;\n            // 0NNN - no idea what should happens, make it no-op for now\n            default:\n                break;\n        }\n    }\n\n    opCodeFamily_0x1(opCode) {\n        const nnn = opCode_nnn(opCode);\n        // 1NNN - Jump to address NNN\n        this.PC = nnn;\n    }\n\n    opCodeFamily_0x2(opCode) {\n        const nnn = opCode_nnn(opCode);\n        // 2NNN - Execute subroutine starting at address NNN\n        this.stack[this.SP] = this.PC;\n        this.SP += 1;\n        this.PC = nnn;\n    }\n\n    opCodeFamily_0x3(opCode) {\n        const x = opCode_x(opCode);\n        const nn = opCode_nn(opCode);\n        // 3XNN - Skip the following instruction if the value of register VX equals NN\n        if (this.V[x] === nn) {\n            this.PC += 2;\n        }\n    }\n\n    opCodeFamily_0x4(opCode) {\n        const x = opCode_x(opCode);\n        const nn = opCode_nn(opCode);\n        // 4XNN - Skip the following instruction if the value of register VX is not equal to NN\n        if (this.V[x] !== nn) {\n            this.PC += 2;\n        }\n    }\n\n    opCodeFamily_0x5(opCode) {\n        const x = opCode_x(opCode);\n        const y = opCode_y(opCode);\n        const n = opCode_n(opCode);\n        if (n !== 0x0) this.throwInvalidOpCode(opCode);\n\n        // 5XY0 - Skip the following instruction if the value of register VX is equal to the value of register VY\n        if (this.V[x] === this.V[y]) {\n            this.PC += 2;\n        }\n    }\n\n    opCodeFamily_0x6(opCode) {\n        const x = opCode_x(opCode);\n        const nn = opCode_nn(opCode);\n\n        // 5XNN - Store number NN in register VX\n        this.V[x] = nn;\n    }\n\n    opCodeFamily_0x7(opCode) {\n        const x = opCode_x(opCode);\n        const nn = opCode_nn(opCode);\n        // 7XNN - Add the value NN to register VX\n        this.V[x] = (this.V[x] + nn) & 0xFF;\n    }\n\n    opCodeFamily_0x8(opCode) {\n        const n = opCode_n(opCode);\n        const x = opCode_x(opCode);\n        const y = opCode_y(opCode);\n        switch (n) {\n            // 8XY0 - Store the value of register VY in register VX\n            case 0x0:\n                this.V[x] = this.V[y];\n                break;\n            // 8XY1 - Set VX to VX OR VY\n            case 0x1:\n                this.V[x] = this.V[x] | this.V[y];\n                break;\n            // 8XY2 - Set VX to VX AND VY\n            case 0x2:\n                this.V[x] = this.V[x] & this.V[y];\n                break;\n            // 8XY3 - Set VX to VX XOR VY\n            case 0x3:\n                this.V[x] = this.V[x] ^ this.V[y];\n                break;\n            /* 8XY4 - Add the value of register VY to register VX\n                    - Set VF to 01 if a carry occurs\n                    - Set VF to 00 if a carry does not occur */\n            case 0x4:\n                const sum = this.V[x] + this.V[y];\n                this.V[0xF] = sum > 0xFF;\n                this.V[x] = sum & 0xFF;\n                break;\n            /* 8XY5 - Subtract the value of register VY from register VX\n                    - Set VF to 00 if a borrow occurs\n                    - Set VF to 01 if a borrow does not occur */\n            case 0x5:\n                const xMinusY = this.V[x] - this.V[y];\n                this.V[0xF] = this.V[x] >= this.V[y];\n                this.V[x] = xMinusY & 0xFF;\n                break;\n            /* 8XY6 - Store the value of register VY shifted right one bit in register VX\n                    - Set register VF to the least significant bit prior to the shift\n                Beware that this will also change the value of VY, see Mastering Chip8.\n            */\n            case 0x6:\n                this.V[0xF] = this.V[y] & 0b00000001;\n                this.V[x] = this.V[y] = this.V[y] >> 1;\n                break;\n            /* 8XY7 - Set register VX to the value of VY minus VX\n                    - Set VF to 00 if a borrow occurs\n                    - Set VF to 01 if a borrow does not occur */\n            case 0x7:\n                const yMinusX = this.V[y] - this.V[x];\n                this.V[0xF] = this.V[y] >= this.V[x];\n                this.V[x] = yMinusX & 0xFF;\n                break;\n            /* 8XYE - Store the value of register VY shifted left one bit in register VX\n                    - Set register VF to the most significant bit prior to the shift\n                Beware that this will also change the value of VY, see Mastering Chip8.\n            */\n            case 0xE:\n                this.V[0xF] = (this.V[y] & 0b10000000) >> 7;\n                this.V[x] = this.V[y] = this.V[y] << 1;\n                break;\n            default: this.throwInvalidOpCode(opCode); return;\n        }\n    }\n\n    opCodeFamily_0x9(opCode) {\n        const x = opCode_x(opCode);\n        const y = opCode_y(opCode);\n        const n = opCode_n(opCode);\n\n        if (n !== 0) this.throwInvalidOpCode(opCode);\n        // 9XY0 - Skip the following instruction if the value of register VX is not equal to the value of register VY\n        if (this.V[x] !== this.V[y]) {\n            this.PC += 2;\n        }\n    }\n\n    opCodeFamily_0xA(opCode) {\n        const nnn = opCode_nnn(opCode);\n        // ANNN - Store memory address NNN in register I\n        this.I = nnn;\n    }\n\n    opCodeFamily_0xB(opCode) {\n        const nnn = opCode_nnn(opCode);\n        // BNNN - Jump to address NNN + V0\n        this.PC = nnn + this.V[0];\n    }\n\n    opCodeFamily_0xC(opCode) {\n        const x = opCode_x(opCode);\n        const nn = opCode_nn(opCode);\n        // CXNN - Set VX to a random number with a mask of NN\n        this.V[x] = (Math.random() * 256) & nn;\n    }\n\n    opCodeFamily_0xD(opCode) {\n        const x = opCode_x(opCode);\n        const y = opCode_y(opCode);\n        const n = opCode_n(opCode);\n        /* DXYN - Draw a sprite at position VX, VY with N bytes of sprite data starting at the address stored in I\n                - Set VF to 01 if any set pixels are changed to unset, and 00 otherwise */\n        this.shouldDraw = true;\n        this.V[0xF] = 0;\n        for (let row = 0; row < n; row++) {\n            const spriteRow = this.memory[this.I + row];\n\n            for (let bitIndex = 0; bitIndex < 8; bitIndex++) {\n                const bit = spriteRow & (0b10000000 >> bitIndex);\n\n                if (!bit) continue;\n\n                const targetX = (this.V[x] + bitIndex) % 64; // modulus to make it wrap to screen\n                const targetY = (this.V[y] + row) % 32;\n                const displayPosition = targetX + (targetY * 64); // Transform 2D to 1D -> i = x + width*y;\n\n                // If the display will be unset, set VF\n                if (this.display[displayPosition] !== 0) {\n                    this.V[0xF] = 0x1;\n                }\n\n                this.display[displayPosition] ^= 1;\n            }\n        }\n    }\n\n    opCodeFamily_0xE(opCode) {\n        const x = opCode_x(opCode);\n        const nn = opCode_nn(opCode);\n\n        switch (nn) {\n            // EX9E - Skip the following instruction if the key corresponding to the hex value currently stored in register VX is pressed\n            case 0x9E:\n                const keyPressed = this.V[x];\n                if (this.keys[keyPressed]) {\n                    this.PC += 2;\n                }\n                break;\n            // EXA1 - Skip the following instruction if the key corresponding to the hex value currently stored in register VX is not pressed\n            case 0xA1:\n                const keyNotPresseed = this.V[x];\n                if (!this.keys[keyNotPresseed]) {\n                    this.PC += 2;\n                }\n                break;\n            default: this.throwInvalidOpCode(opCode); return;\n        }\n    }\n\n    opCodeFamily_0xF(opCode) {\n        const x = opCode_x(opCode);\n        const nn = opCode_nn(opCode);\n\n        switch (nn) {\n            // FX07 - Store the current value of the delay timer in register VX\n            case 0x07:\n                this.V[x] = this.DT;\n                break;\n            // FX0A\t- Wait for a keypress and store the result in register VX\n            case 0x0A:\n                this.waitingKey = true;\n                this.waitingKeyTarget = x;\n                break;\n            // FX15 - Set the delay timer to the value of register VX\n            case 0x15:\n                this.DT = this.V[x];\n                break;\n            // FX18 - Set the sound timer to the value of register VX\n            case 0x18:\n                this.ST = this.V[x];\n                break;\n            // FX1E - Add the value stored in register VX to register I\n            case 0x1E:\n                this.I = (this.I + this.V[x]) & 0xFFFF;\n                break;\n            // FX29 - Set I to the memory address of the sprite data corresponding to the hexadecimal digit stored in register VX\n            case 0x29:\n                this.I = (this.V[x] & 0xF) * 5;\n                break;\n            // FX33 - Store the binary-coded decimal equivalent of the value stored in register VX at addresses I, I+1, and I+2\n            case 0x33:\n                this.memory[this.I] = Math.floor(this.V[x] / 100) % 10;\n                this.memory[this.I + 1] = Math.floor(this.V[x] / 10) % 10;\n                this.memory[this.I + 2] = this.V[x] % 10;\n                break;\n            /* FX55 - Store the values of registers V0 to VX inclusive in memory starting at address I\n                    - I is set to I + X + 1 after operation */\n            case 0x55:\n                for (let i = 0; i <= x; i++) {\n                    this.memory[this.I] = this.V[i];\n                    this.I = (this.I + 1) & 0xFFFF;\n                }\n                break;\n            /* FX65 - Fill registers V0 to VX inclusive with the values stored in memory starting at address I\n                    - I is set to I + X + 1 after operation */\n            case 0x65:\n                for (let i = 0; i <= x; i++) {\n                    this.V[i] = this.memory[this.I];\n                    this.I = (this.I + 1) & 0xFFFF;\n                }\n                break;\n            default: this.throwInvalidOpCode(opCode); return;\n        }\n    }\n}\n\nexport default Chip8;\n","import React from 'react';\nimport './Screen.css';\n\nclass Screen extends React.Component {\n    constructor(props) {\n        super(props);\n        this.containerRef = React.createRef();\n        this.canvasRef = React.createRef();\n    }\n\n    /**\n     * Calculates the new size of the canvas.\n     * \n     * The canvas must be the biggest rectangle that\n     * fits the container while mantain the aspect ratio\n     */\n    resizeCanvas() {\n        const containerWidth = this.containerRef.current.offsetWidth,\n            containerHeight = this.containerRef.current.offsetHeight;\n\n        const scale = Math.floor(Math.min(containerWidth / 64, containerHeight / 32));\n        this.canvasWidth = this.canvasRef.current.width = 64 * scale;\n        this.canvasHeight = this.canvasRef.current.height = 32 * scale;\n    }\n\n    /**\n     * Draw the display data on the Canvas element\n     */\n    draw() {\n        // Clear the screen\n        this.ctx.fillStyle = this.rgbFromColor(this.props.backgroundColor);\n        this.ctx.fillRect(0, 0, this.canvasWidth, this.canvasHeight);\n\n        const pixelSize = this.canvasHeight / 32;\n\n        this.ctx.fillStyle = this.rgbFromColor(this.props.drawColor);\n        const displayData = this.props.displayData;\n        for (let i = 0; i < displayData.length; i++) {\n            const y = Math.floor(i / 64);\n            const x = i % 64;\n            if (displayData[i] !== 0) {\n                const scaledX = x * pixelSize,\n                    scaledY = y * pixelSize;\n                this.ctx.shadowBlur =  Math.random() * 30;\n                this.ctx.shadowColor = `rgba(102, 255, 102, ${Math.random() * 0.3})`;\n                this.ctx.fillRect(scaledX, scaledY, pixelSize, pixelSize);\n            }\n        }\n        this.requestFrameId = window.requestAnimationFrame(this.draw.bind(this));\n    }\n\n    /**\n     * @typedef {object} Color\n     * @property {number} r - Red\n     * @property {number} g - Green\n     * @property {number} b - Blue\n     */\n    /**\n     * Transform a Color Object to the rgb color string\n     * @property {Color} color - Color object\n     */\n    rgbFromColor(color) {\n        return `rgb(${color.r},${color.g},${color.b})`;\n    }\n\n    componentDidMount() {\n        this.ctx = this.canvasRef.current.getContext(\"2d\");\n        this.canvasWidth = this.canvasRef.current.width;\n        this.canvasHeight = this.canvasRef.current.height;\n        this.resizeCanvas();\n        this.requestFrameId = window.requestAnimationFrame(this.draw.bind(this));\n        window.addEventListener(\"resize\", this.resizeCanvas.bind(this));\n    }\n\n    componentWillUnmount() {\n        window.cancelAnimationFrame(this.requestFrameId);\n        window.removeEventListener(\"resize\", this.resizeCanvas.bind(this));\n    }\n\n    shouldComponentUpdate() {\n        return false;\n    }\n\n    render() {\n        return (\n            <section ref={this.containerRef} className=\"ScreenContainer\">\n                <canvas ref={this.canvasRef} className=\"ScreenCanvas\"></canvas>\n            </section>\n        );\n    }\n}\n\nScreen.defaultProps = {\n    backgroundColor: { r: 40, g: 40, b: 40 },\n    drawColor: { r: 102, g: 255, b: 102 },\n    displayData: new Array(64 * 32).fill(0)\n}\n\nexport default Screen;\n","import Screen from './Screen';\n\nexport default Screen;\n","import React from 'react';\nimport './Register.css';\n\nclass Register extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            oldValue: 0,\n            currentValue: 0\n        };\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (this.state.currentValue !== nextProps.value) {\n            this.setState({\n                oldValue: this.state.currentValue,\n                currentValue: nextProps.value\n            });\n            return true;\n        }\n        return false;\n    }\n\n    render() {\n        return (\n            <li className=\"Register\">\n                <label className=\"Label\">{this.props.label}</label>\n                <span className=\"OldValue\">{this.numberToHex(this.state.oldValue)}</span>\n                <span className=\"CurrentValue\">{this.numberToHex(this.state.currentValue)}</span>\n            </li>\n        );\n    }\n\n    numberToHex(number) {\n        const hex = number.toString(16);\n        return hex.padStart(2 * this.props.bytes, \"0\").toUpperCase();\n    }\n}\n\nRegister.defaultProps = {\n    bytes: 1\n}\n\nexport default Register;\n","import Register from './Register';\n\nexport default Register;\n","import VRegisters from './VRegisters';\n\nexport default VRegisters;\n","import React from 'react';\nimport Register from '../Register';\nimport './VRegisters.css';\n\nclass VRegisters extends React.Component {\n\n    render() {\n        const items = Array.from(this.props.v).map(function (number, index) {\n            return (<Register key={index.toString()} label={`V${index.toString(16).toUpperCase()}`} value={number}></Register>);\n        });\n        return (\n            <ul className=\"VRegisters\">\n                {items}\n            </ul>\n        );\n    }\n}\n\nexport default VRegisters;\n","import Stack from './Stack';\n\nexport default Stack;\n","import React from 'react';\nimport Register from '../Register';\nimport './Stack.css';\n\nclass Stack extends React.Component {\n\n    render() {\n        const items = Array.from(this.props.stack).map(function (number, index) {\n            return (<Register key={index.toString()} label={`SP${index.toString(16).toUpperCase()}`} value={number} bytes={2}></Register>);\n        });\n        return (\n            <ul className=\"Stack\">\n                {items}\n            </ul>\n        );\n    }\n}\n\nexport default Stack;\n","import App from './App';\n\nexport default App;\n","import React from 'react';\nimport './App.css';\n\nimport Chip8 from \"../../interpreter/chip8\";\nimport Screen from \"../Screen\";\nimport VRegisters from \"../VRegisters\";\nimport Stack from \"../Stack\";\n\n// 1\t2\t3\tC\n// 4\t5\t6\tD\n// 7\t8\t9\tE\n// A\t0\tB\tF\n// const keyCodeMap = {\n//   'Digit1': 0x1, 'Digit2': 0x2, 'Digit3': 0x3, 'Digit4': 0xC,\n//   'KeyQ': 0x4, 'KeyW': 0x5, 'KeyE': 0x6, 'KeyR': 0xD,\n//   'KeyA': 0x7, 'KeyS': 0x8, 'KeyD': 0x9, 'KeyF': 0xE,\n//   'KeyZ': 0xA, 'KeyX': 0x0, 'KeyC': 0xB, 'KeyV': 0xF,\n// };\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      displayData: new Array(0).fill(0),\n      v: new Uint8Array(16),\n      stack: new Uint16Array(16),\n    };\n    this.myRef = React.createRef();\n    this.intervalHandle = null;\n    this.cyclesPerTick = 10;\n    this.rom = [];\n    this.chip8 = new Chip8();\n  }\n\n  handleFile = (evt) => {\n    evt.preventDefault();\n\n    const file = evt.target.files[0];\n\n    const reader = new FileReader();\n\n    reader.onload = (event) => {\n      const arrayBufferNew = event.target.result;\n      this.rom = new Uint8Array(arrayBufferNew);\n    };\n\n    reader.readAsArrayBuffer(file);\n  }\n\n  handleStart = (e) => {\n    e.preventDefault();\n\n    if (this.intervalHandle) {\n      clearInterval(this.intervalHandle);\n    }\n\n    this.chip8.reset();\n    // Load the ROM\n    let addr = 0x200;\n    console.log(`Rom size ${this.rom.length}`);\n    this.rom.forEach((byte) => {\n      this.chip8.writeByte(addr, byte);\n      addr++;\n    });\n\n    // Start our CPU at 60Hz\n    const frequency = 1000 / 60;\n    this.intervalHandle = setInterval(() => {\n      let remainingCycles = this.cyclesPerTick;\n      do {\n        this.chip8.cycle();\n        remainingCycles--;\n      } while (remainingCycles > 0);\n\n      this.setState({\n        displayData: this.chip8.display,\n        v: this.chip8.V,\n        stack: this.chip8.stack,\n      });\n\n      this.chip8.soundTimerTick();\n      this.chip8.delayTimerTick();\n    }, frequency);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <input className=\"SelectRom\" type=\"file\" id=\"file\" onChange={this.handleFile} />\n        <button id=\"start\" onClick={this.handleStart}>Start!</button>\n        <section className=\"MemoryView\">\n          <VRegisters v={this.state.v}></VRegisters>\n          <Stack stack={this.state.stack}></Stack>\n          \n        </section>\n        <section className=\"DisplayView\">\n          <Screen displayData={this.state.displayData}></Screen>\n        </section>\n      </div>);\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from \"./components\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}